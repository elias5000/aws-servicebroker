AWSTemplateFormatVersion: 2010-09-09
Description:  "AWS Service Broker - DocumentDB Cluster"
Metadata:
  AWS::ServiceBroker::Specification:
    Version: 1.0
    Tags:
      - AWS
      - DocumentDB
      - MongoDB
      - database
    Name: documentdb
    DisplayName: Amazon DocumentDB with MongoDB compatibility
    LongDescription: DocumentDB is a managed MongoDB compatible API.
    ImageUrl: https://s3.amazonaws.com/awsservicebroker/icons/dynamodb_sample.png
    DocumentationUrl: https://aws.amazon.com/documentation/documentdb/
    ProviderDisplayName: Amazon Web Services
    ServicePlans:
      production:
        DisplayName: Production
        Description: Configuration designed for production deployments
        LongDescription: Creates an Amazon DocDB database suitable for production use
        Cost: https://aws.amazon.com/documentdb/pricing/
        ParameterValues:
          NumberOfAvailabilityZones: 3
          NumberOfInstances: 2
          BackupRetentionPeriod: 30
      dev:
        DisplayName: Development
        Description: Configuration designed for development and testing deployments
        LongDescription: Creates an Amazon DocDB database suitable for production use
        Cost: https://aws.amazon.com/documentdb/pricing/
        ParameterValues:
          NumberOfAvailabilityZones: 2
          NumberOfInstances: 1
          BackupRetentionPeriod: 0
      custom:
        DisplayName: Custom
        Description: Custom Configuration for Advanced deployments
        LongDescription: Creates an Amazon DocDB database suitable for production use
        Cost: https://aws.amazon.com/documentdb/pricing/
        ParameterValues: {}
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Database Options
        Parameters:
          - MasterUsername
          - MasterUserPassword
          - NumberOfInstances
          - PortNumber
      - Label:
          default: Network and Security
        Parameters:
          - VpcId
          - AccessCidr
          - CidrBlocks
          - CidrSize
          - NumberOfAvailabilityZones
          - AvailabilityZones
      - Label:
          default: Backup
        Parameter:
          - PreferredBackupWindow
          - BackupRetentionPeriod
    ParameterLabels:
      AccessCidr:
        default: Access CIDR
      AvailabilityZones:
        default: Availability Zones
      CidrBlocks:
        default: CIDR Blocks
      CidrSize:
        default: CIDR Size
      MasterUsername:
        default: Master Username
      MasterUserPassword:
        default: Master Password
      PortNumber:
        default: Port Number
      VpcId:
        default: VPC Id
      NumberOfAvailabilityZones:
        default: Number of Availability Zones
      NumberOfInstances:
        default: Number of DocDB Instances
      PreferredBackupWindow:
        default: Backup Window in UTC
      BackupRetentionPeriod:
        default: Backup Retention Period in Days

Parameters:
  AccessCidr:
    Description: CIDR block to allow to connect to database
    Type: String
  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: "VPC Id"
  AvailabilityZones:
    Description: list of availability zones to use, must be the same quantity as specified in NumberOfAvailabilityZones
    Type: CommaDelimitedList
    Default: Auto
  CidrBlocks:
    Description: comma seperated list of CIDR blocks to place RDS into, must be the same quantity as specified in NumberOfAvailabilityZones
    Type: CommaDelimitedList
    Default: Auto
  CidrSize:
    Description: Size of Cidr block to allocate if CidrBlocks is set to Auto.
    Type: String
    Default: 27
  PortNumber:
    Description: The port number for the database server to listen on
    Type: Number
    Default: '27017'
    MinValue: '1150'
    MaxValue: '65535'
  ClusterName:
    Description: The name of the cLuster to create when the DocDB is created, will be autogenerated if set to "Auto".
    Type: String
    MinLength: '1'
    MaxLength: '64'
    Default: Auto
  MasterUsername:
    NoEcho: "true"
    Default: "master"
    Description: "The database admin account username"
    Type: "String"
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: "Must begin with a letter and contain only alphanumeric characters."
  MasterUserPassword:
    NoEcho: "true"
    Default: Auto
    Description: "The database admin account password"
    Type: "String"
    MinLength: "1"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]+"
    ConstraintDescription: "must contain only alphanumeric characters."

  NumberOfAvailabilityZones:
    Type: Number
    Description: Number of Availability Zones
    Default: 2
    AllowedValues:
      - 2
      - 3
  NumberOfInstances:
    Type: Number
    Description: Number of DocDB Instances (for HA)
    Default: 1
    AllowedValues:
      - 1
      - 2
      - 3
  BackupRetentionPeriod:
    Type: Number
    Description: "Days to keep backups"
    Default: 7
  PreferredBackupWindow:
    Description: The daily time range in UTC during which automated backups are created
      (if automated backups are enabled). Cannot overlap with PreferredMaintenanceWindowTime
    Type: String
    Default: 00:00-02:00
    AllowedValues:
    - 00:00-02:00
    - 01:00-03:00
    - 02:00-04:00
    - 03:00-05:00
    - 04:00-06:00
    - 05:00-07:00
    - 06:00-08:00
    - 07:00-09:00
    - 08:00-10:00
    - 09:00-11:00
    - 10:00-12:00
    - 11:00-13:00
    - 12:00-14:00
    - 13:00-15:00
    - 14:00-16:00
    - 15:00-17:00
    - 16:00-18:00
    - 17:00-19:00
    - 18:00-20:00
    - 19:00-21:00
    - 20:00-22:00
    - 21:00-23:00
    - 22:00-24:00
  StorageEncrypted:
    Description: Indicates whether the DB instance is encrypted.
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'

Conditions:
  3az:
    !Equals
    - !Ref NumberOfAvailabilityZones
    - 3
  inst2:
    !Or
    - !Equals
      - !Ref NumberOfInstances
      - 2
    - !Equals
      - !Ref NumberOfInstances
      - 3
  inst3:
    !Equals
    - !Ref NumberOfInstances
    - 3
  AutoCidrs:
    !Equals
    - !Select
      - 0
      - !Ref CidrBlocks
    - Auto
  AutoAzs:
    !Equals
    - !Select
      - 0
      - !Ref AvailabilityZones
    - Auto
  AutoPassword:
    !Equals
    - !Ref MasterUserPassword
    - Auto
  AutoClusterName:
    !Equals
    - !Ref ClusterName
    - Auto
  EncryptionEnabled:
    !Equals
    - !Ref StorageEncrypted
    - 'true'

Resources:

  AWSSBInjectedLambdaZipsBucket:
    Type: AWS::S3::Bucket
    Properties:
      Tags: []
  AWSSBInjectedCopyZips:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedCopyZipsLambda.Arn
      DestBucket: !Ref AWSSBInjectedLambdaZipsBucket
      SourceBucket: awsservicebrokeralpha
      Prefix: functions/
      Objects:
        - get_cidrs/lambda_function.zip
        - get_azs/lambda_function.zip
        - generate_password/lambda_function.zip
        - generate_dbname/lambda_function.zip
  AWSSBInjectedCopyZipsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: lambda-copier
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                Resource:
                  - arn:aws:s3:::awsservicebrokeralpha/*
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:DeleteObject
                Resource:
                  - !Sub arn:aws:s3:::${AWSSBInjectedLambdaZipsBucket}/*
  AWSSBInjectedCopyZipsLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Copies objects from a source S3 bucket to a destination
      Handler: index.handler
      Runtime: python2.7
      Role: !GetAtt AWSSBInjectedCopyZipsRole.Arn
      Timeout: 240
      Code:
        ZipFile: |
          import json
          import logging
          import threading
          import boto3
          import cfnresponse
          def copy_objects(source_bucket, dest_bucket, prefix, objects):
              s3 = boto3.client('s3')
              for o in objects:
                  key = prefix + o
                  copy_source = {
                      'Bucket': source_bucket,
                      'Key': key
                  }
                  print('copy_source: %s' % copy_source)
                  print('dest_bucket = %s' % dest_bucket)
                  print('key = %s' % key)
                  s3.copy_object(CopySource=copy_source, Bucket=dest_bucket, Key=key)
          def delete_objects(bucket, prefix, objects):
              s3 = boto3.client('s3')
              objects = {'Objects': [{'Key': prefix + o} for o in objects]}
              s3.delete_objects(Bucket=bucket, Delete=objects)
          def timeout(event, context):
              logging.error('Execution is about to time out, sending failure response to CloudFormation')
              cfnresponse.send(event, context, cfnresponse.FAILED, {}, None)
          def handler(event, context):
              timer = threading.Timer((context.get_remaining_time_in_millis() / 1000.00) - 0.5, timeout, args=[event, context])
              timer.start()
              print('Received event: %s' % json.dumps(event))
              status = cfnresponse.SUCCESS
              try:
                  source_bucket = event['ResourceProperties']['SourceBucket']
                  dest_bucket = event['ResourceProperties']['DestBucket']
                  prefix = event['ResourceProperties']['Prefix']
                  objects = event['ResourceProperties']['Objects']
                  if event['RequestType'] == 'Delete':
                      delete_objects(dest_bucket, prefix, objects)
                  else:
                      copy_objects(source_bucket, dest_bucket, prefix, objects)
              except Exception as e:
                  logging.error('Exception: %s' % e, exc_info=True)
                  status = cfnresponse.FAILED
              finally:
                  timer.cancel()
                  cfnresponse.send(event, context, status, {}, None)

  AWSSBInjectedGetCidrsRole:
    Condition: AutoCidrs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cfn_utility_get_cidrs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeVpcs
                  - ec2:DescribeSubnets
                  - ec2:DescribeAvailabilityZones
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  AWSSBInjectedGetCidrsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoCidrs
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
          - AWSSBInjectedGetCidrsRole
          - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_cidrs/lambda_function.zip
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedGetCidrs:
    Condition: AutoCidrs
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetCidrsLambda.Arn
      Qty: !Ref NumberOfAvailabilityZones
      VpcId: !Ref VpcId
      CidrSize: !Ref CidrSize
  AWSSBInjectedGetAzsRole:
    Condition: AutoAzs
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: cfn_utility_get_cidrs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ec2:DescribeAvailabilityZones
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'
  AWSSBInjectedGetAzsLambda:
    DependsOn: AWSSBInjectedCopyZips
    Condition: AutoAzs
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
          - AWSSBInjectedGetAzsRole
          - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/get_azs/lambda_function.zip
      Runtime: python2.7
      Timeout: '60'
  AWSSBInjectedGetAzs:
    Condition: AutoAzs
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGetAzsLambda.Arn
      Qty: !Ref NumberOfAvailabilityZones
  AWSSBInjectedGenerateClusterNameRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGenerateClusterNameLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGenerateClusterNameRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_dbname/lambda_function.zip
      Runtime: python3.6
      Timeout: '60'
  AWSSBInjectedGenerateClusterName:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGenerateClusterNameLambda.Arn
      Length: 32
  AWSSBInjectedGeneratePasswordRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: /
      Policies:
      - PolicyName: cfn_utility_get_cidrs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: '*'
  AWSSBInjectedGeneratePasswordLambda:
    DependsOn: AWSSBInjectedCopyZips
    Type: AWS::Lambda::Function
    Properties:
      Handler: lambda_function.handler
      Role:
        Fn::GetAtt:
        - AWSSBInjectedGeneratePasswordRole
        - Arn
      Code:
        S3Bucket: !Ref AWSSBInjectedLambdaZipsBucket
        S3Key: functions/generate_password/lambda_function.zip
      Runtime: python3.6
      Timeout: '60'
  AWSSBInjectedGeneratePassword:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt AWSSBInjectedGeneratePasswordLambda.Arn
      Length: 32

  KMSKey:
    Condition: EncryptionEnabled
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub DocDB ${ClusterName}
      Enabled: 'true'
      EnableKeyRotation: 'true'
      KeyPolicy:
        Version: '2012-10-17'
        Id: key-default-1
        Statement:
        - Sid: Allow administration of the key
          Effect: Allow
          Principal:
            AWS: !Sub arn:aws:iam::${AWS::AccountId}:root
          Action:
          - kms:Create*
          - kms:Describe*
          - kms:Enable*
          - kms:List*
          - kms:Put*
          - kms:Update*
          - kms:Revoke*
          - kms:Disable*
          - kms:Get*
          - kms:Delete*
          - kms:ScheduleKeyDeletion
          - kms:CancelKeyDeletion
          Resource: '*'

  DBCluster:
    Type: "AWS::DocDB::DBCluster"
    DeletionPolicy: Snapshot
    Properties:
      DBClusterIdentifier:
        !If
        - AutoClusterName
        - !GetAtt AWSSBInjectedGenerateClusterName.DBName
        - !Ref ClusterName
      DBSubnetGroupName: !Ref DBSubnetGroup
      Port: !Ref PortNumber
      MasterUsername: !Ref MasterUsername
      MasterUserPassword:
        !If
        - AutoPassword
        - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
        - !Ref MasterUserPassword
      BackupRetentionPeriod: !Ref BackupRetentionPeriod
      PreferredBackupWindow: !Ref PreferredBackupWindow
      StorageEncrypted: !Ref StorageEncrypted
      KmsKeyId:
        !If
        - EncryptionEnabled
        - !GetAtt KMSKey.Arn
        - !Ref AWS::NoValue
      VpcSecurityGroupIds:
        - !Ref DBSecurityGroup
  DBInstance1:
    Type: "AWS::DocDB::DBInstance"
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: "db.r5.large"
    DependsOn: DBCluster
  DBInstance2:
    Type: "AWS::DocDB::DBInstance"
    Condition: inst2
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: "db.r5.large"
    DependsOn: DBCluster
  DBInstance3:
    Type: "AWS::DocDB::DBInstance"
    Condition: inst3
    Properties:
      DBClusterIdentifier: !Ref DBCluster
      DBInstanceClass: "db.r5.large"
    DependsOn: DBCluster
  DBSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone:
        !Select
        - 0
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      CidrBlock:
        !Select
        - 0
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  DBSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone:
        !Select
        - 1
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      CidrBlock:
        !Select
        - 1
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  DBSubnet3:
    Condition: 3az
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VpcId
      AvailabilityZone:
        !Select
        - 2
        - !If
          - AutoAzs
          - !GetAtt AWSSBInjectedGetAzs.AvailabilityZones
          - !Ref AvailabilityZones
      CidrBlock:
        !Select
        - 2
        - !If
          - AutoCidrs
          - !GetAtt AWSSBInjectedGetCidrs.CidrBlocks
          - !Ref CidrBlocks
  DBSubnetGroup:
    Type: "AWS::DocDB::DBSubnetGroup"
    Properties:
      DBSubnetGroupDescription: "DocumentDB Subnetgroup"
      SubnetIds:
        - !Ref DBSubnet1
        - !Ref DBSubnet2
        - !If
          - 3az
          - !Ref DBSubnet3
          - !Ref AWS::NoValue
  DBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub Allow Client connections to DocDB CLuster ${ClusterName}
      VpcId: !Ref VpcId
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: !Ref PortNumber
        ToPort: !Ref PortNumber
        CidrIp: !Ref AccessCidr
      SecurityGroupEgress:
      - IpProtocol: '-1'
        FromPort: '-1'
        ToPort: '-1'
        CidrIp: 0.0.0.0/0

Outputs:
  ClusterEndpoint:
    Value: !GetAtt DBCluster.Endpoint
  ClusterReadEndpoint:
    Value: !GetAtt DBCluster.ReadEndpoint
  ClusterPort:
    Value: !GetAtt DBCluster.Port
  MasterUsername:
    Value: !Ref MasterUsername
  MasterUserPassword:
    Value:
      !If
      - AutoPassword
      - !GetAtt AWSSBInjectedGeneratePassword.MasterUserPassword
      - !Ref MasterUserPassword
  ClusterName:
    Value:
      !If
      - AutoClusterName
      - !GetAtt AWSSBInjectedGenerateClusterName.DBName
      - !Ref ClusterName
